// <auto-generated />
using System;
using HRM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240723042350_HRM-Check-Data")]
    partial class HRMCheckData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRM.Models.Benefits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BenefitsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenefitsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeBenefits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Benefits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BenefitsDescription = "Comprehensive health insurance",
                            BenefitsName = "Health Insurance",
                            EndAt = new DateTime(2025, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(312),
                            PositionId = 1,
                            StartAt = new DateTime(2023, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(294),
                            TypeBenefits = "Health"
                        },
                        new
                        {
                            Id = 2,
                            BenefitsDescription = "Comprehensive dental insurance",
                            BenefitsName = "Dental Insurance",
                            EndAt = new DateTime(2025, 8, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(316),
                            PositionId = 2,
                            StartAt = new DateTime(2023, 8, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(315),
                            TypeBenefits = "Health"
                        },
                        new
                        {
                            Id = 3,
                            BenefitsDescription = "Comprehensive vision insurance",
                            BenefitsName = "Vision Insurance",
                            EndAt = new DateTime(2025, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(318),
                            PositionId = 3,
                            StartAt = new DateTime(2023, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(317),
                            TypeBenefits = "Health"
                        },
                        new
                        {
                            Id = 4,
                            BenefitsDescription = "Company matched retirement plan",
                            BenefitsName = "Retirement Plan",
                            EndAt = new DateTime(2025, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(321),
                            PositionId = 4,
                            StartAt = new DateTime(2023, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(320),
                            TypeBenefits = "Retirement"
                        },
                        new
                        {
                            Id = 5,
                            BenefitsDescription = "20 days paid time off per year",
                            BenefitsName = "Paid Time Off",
                            EndAt = new DateTime(2025, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(323),
                            PositionId = 5,
                            StartAt = new DateTime(2023, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(322),
                            TypeBenefits = "Leave"
                        },
                        new
                        {
                            Id = 6,
                            BenefitsDescription = "Life insurance coverage",
                            BenefitsName = "Life Insurance",
                            EndAt = new DateTime(2025, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(325),
                            PositionId = 6,
                            StartAt = new DateTime(2023, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(324),
                            TypeBenefits = "Life"
                        },
                        new
                        {
                            Id = 7,
                            BenefitsDescription = "Short and long-term disability insurance",
                            BenefitsName = "Disability Insurance",
                            EndAt = new DateTime(2026, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(328),
                            PositionId = 7,
                            StartAt = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(328),
                            TypeBenefits = "Disability"
                        },
                        new
                        {
                            Id = 8,
                            BenefitsDescription = "Free gym membership",
                            BenefitsName = "Gym Membership",
                            EndAt = new DateTime(2026, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(330),
                            PositionId = 8,
                            StartAt = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(330),
                            TypeBenefits = "Wellness"
                        },
                        new
                        {
                            Id = 9,
                            BenefitsDescription = "Reimbursement for continuing education",
                            BenefitsName = "Tuition Reimbursement",
                            EndAt = new DateTime(2026, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(332),
                            PositionId = 9,
                            StartAt = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(332),
                            TypeBenefits = "Education"
                        },
                        new
                        {
                            Id = 10,
                            BenefitsDescription = "Subsidized commuting costs",
                            BenefitsName = "Commuter Benefits",
                            EndAt = new DateTime(2026, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(334),
                            PositionId = 10,
                            StartAt = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(334),
                            TypeBenefits = "Commuting"
                        });
                });

            modelBuilder.Entity("HRM.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "Engineering",
                            Description = "Handles product development"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "Human Resources",
                            Description = "Handles employee relations"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentName = "Marketing",
                            Description = "Handles marketing and advertising"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentName = "Sales",
                            Description = "Handles sales and customer relations"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentName = "Finance",
                            Description = "Handles financial operations"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentName = "Customer Support",
                            Description = "Handles customer support"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentName = "Legal",
                            Description = "Handles legal matters"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentName = "IT",
                            Description = "Handles IT infrastructure"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentName = "Operations",
                            Description = "Handles day-to-day operations"
                        },
                        new
                        {
                            Id = 10,
                            DepartmentName = "R&D",
                            Description = "Handles research and development"
                        });
                });

            modelBuilder.Entity("HRM.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            DepartmentId = 1,
                            Email = "john.smith@example.com",
                            FirstName = "John",
                            FullName = "John A Smith",
                            HireDate = new DateTime(2023, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(495),
                            LastName = "Smith",
                            MiddleName = "A",
                            PositionId = 1,
                            ShiftId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            DepartmentId = 2,
                            Email = "jane.doe@example.com",
                            FirstName = "Jane",
                            FullName = "Jane B Doe",
                            HireDate = new DateTime(2023, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(500),
                            LastName = "Doe",
                            MiddleName = "B",
                            PositionId = 2,
                            ShiftId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine St",
                            DepartmentId = 3,
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            FullName = "Alice C Johnson",
                            HireDate = new DateTime(2023, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(503),
                            LastName = "Johnson",
                            MiddleName = "C",
                            PositionId = 3,
                            ShiftId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Oak St",
                            DepartmentId = 4,
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            FullName = "Bob D Brown",
                            HireDate = new DateTime(2023, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(506),
                            LastName = "Brown",
                            MiddleName = "D",
                            PositionId = 4,
                            ShiftId = 4
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Birch St",
                            DepartmentId = 5,
                            Email = "charlie.davis@example.com",
                            FirstName = "Charlie",
                            FullName = "Charlie E Davis",
                            HireDate = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(508),
                            LastName = "Davis",
                            MiddleName = "E",
                            PositionId = 5,
                            ShiftId = 5
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Maple St",
                            DepartmentId = 6,
                            Email = "emily.clark@example.com",
                            FirstName = "Emily",
                            FullName = "Emily F Clark",
                            HireDate = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(510),
                            LastName = "Clark",
                            MiddleName = "F",
                            PositionId = 6,
                            ShiftId = 6
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Cedar St",
                            DepartmentId = 7,
                            Email = "daniel.lee@example.com",
                            FirstName = "Daniel",
                            FullName = "Daniel G Lee",
                            HireDate = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(512),
                            LastName = "Lee",
                            MiddleName = "G",
                            PositionId = 7,
                            ShiftId = 7
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Spruce St",
                            DepartmentId = 8,
                            Email = "sophia.martinez@example.com",
                            FirstName = "Sophia",
                            FullName = "Sophia H Martinez",
                            HireDate = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(514),
                            LastName = "Martinez",
                            MiddleName = "H",
                            PositionId = 8,
                            ShiftId = 8
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 Fir St",
                            DepartmentId = 9,
                            Email = "james.davis@example.com",
                            FirstName = "James",
                            FullName = "James I Davis",
                            HireDate = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(516),
                            LastName = "Davis",
                            MiddleName = "I",
                            PositionId = 9,
                            ShiftId = 9
                        },
                        new
                        {
                            Id = 10,
                            Address = "707 Redwood St",
                            DepartmentId = 10,
                            Email = "ava.wilson@example.com",
                            FirstName = "Ava",
                            FullName = "Ava J Wilson",
                            HireDate = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(517),
                            LastName = "Wilson",
                            MiddleName = "J",
                            PositionId = 10,
                            ShiftId = 10
                        });
                });

            modelBuilder.Entity("HRM.Models.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalaryId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Performances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great performance",
                            EmployeeId = 1,
                            EvaluationDate = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(543),
                            SalaryId = 1,
                            Score = 85,
                            TrainingId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Excellent work",
                            EmployeeId = 2,
                            EvaluationDate = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(545),
                            SalaryId = 2,
                            Score = 90,
                            TrainingId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Satisfactory performance",
                            EmployeeId = 3,
                            EvaluationDate = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(547),
                            SalaryId = 3,
                            Score = 78,
                            TrainingId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Outstanding performance",
                            EmployeeId = 4,
                            EvaluationDate = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(548),
                            SalaryId = 4,
                            Score = 92,
                            TrainingId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Very good performance",
                            EmployeeId = 5,
                            EvaluationDate = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(550),
                            SalaryId = 5,
                            Score = 88,
                            TrainingId = 5
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Good work",
                            EmployeeId = 6,
                            EvaluationDate = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(551),
                            SalaryId = 6,
                            Score = 80,
                            TrainingId = 6
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Needs improvement",
                            EmployeeId = 7,
                            EvaluationDate = new DateTime(2023, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(552),
                            SalaryId = 7,
                            Score = 75,
                            TrainingId = 7
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Great performance",
                            EmployeeId = 8,
                            EvaluationDate = new DateTime(2023, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(554),
                            SalaryId = 8,
                            Score = 89,
                            TrainingId = 8
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Satisfactory performance",
                            EmployeeId = 9,
                            EvaluationDate = new DateTime(2023, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(556),
                            SalaryId = 9,
                            Score = 84,
                            TrainingId = 9
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Outstanding performance",
                            EmployeeId = 10,
                            EvaluationDate = new DateTime(2023, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(557),
                            SalaryId = 10,
                            Score = 91,
                            TrainingId = 10
                        });
                });

            modelBuilder.Entity("HRM.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PositionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PositionDescription = "Develops software applications",
                            PositionName = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            PositionDescription = "Manages HR department",
                            PositionName = "HR Manager"
                        },
                        new
                        {
                            Id = 3,
                            PositionDescription = "Handles marketing tasks",
                            PositionName = "Marketing Specialist"
                        },
                        new
                        {
                            Id = 4,
                            PositionDescription = "Handles sales tasks",
                            PositionName = "Sales Executive"
                        },
                        new
                        {
                            Id = 5,
                            PositionDescription = "Analyzes financial data",
                            PositionName = "Finance Analyst"
                        },
                        new
                        {
                            Id = 6,
                            PositionDescription = "Handles customer queries",
                            PositionName = "Customer Support Representative"
                        },
                        new
                        {
                            Id = 7,
                            PositionDescription = "Handles legal issues",
                            PositionName = "Legal Advisor"
                        },
                        new
                        {
                            Id = 8,
                            PositionDescription = "Manages IT infrastructure",
                            PositionName = "IT Specialist"
                        },
                        new
                        {
                            Id = 9,
                            PositionDescription = "Manages operations",
                            PositionName = "Operations Manager"
                        },
                        new
                        {
                            Id = 10,
                            PositionDescription = "Conducts research and development",
                            PositionName = "Research Scientist"
                        });
                });

            modelBuilder.Entity("HRM.Models.Recruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecruitmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecruitmentPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requestment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Recruitments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(617),
                            DepartmentId = 1,
                            PostingDate = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(616),
                            RecruitmentDescription = "Looking for a Software Engineer",
                            RecruitmentPosition = "Software Engineer",
                            Requestment = "[]",
                            Status = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(621),
                            DepartmentId = 2,
                            PostingDate = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(620),
                            RecruitmentDescription = "Looking for an HR Manager",
                            RecruitmentPosition = "HR Manager",
                            Requestment = "[]",
                            Status = "Open"
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(624),
                            DepartmentId = 3,
                            PostingDate = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(623),
                            RecruitmentDescription = "Looking for a Marketing Specialist",
                            RecruitmentPosition = "Marketing Specialist",
                            Requestment = "[]",
                            Status = "Closed"
                        },
                        new
                        {
                            Id = 4,
                            Deadline = new DateTime(2024, 7, 8, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(626),
                            DepartmentId = 4,
                            PostingDate = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(626),
                            RecruitmentDescription = "Looking for a Sales Executive",
                            RecruitmentPosition = "Sales Executive",
                            Requestment = "[]",
                            Status = "Open"
                        },
                        new
                        {
                            Id = 5,
                            Deadline = new DateTime(2024, 7, 13, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(632),
                            DepartmentId = 5,
                            PostingDate = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(632),
                            RecruitmentDescription = "Looking for a Finance Analyst",
                            RecruitmentPosition = "Finance Analyst",
                            Requestment = "[]",
                            Status = "Closed"
                        },
                        new
                        {
                            Id = 6,
                            Deadline = new DateTime(2024, 7, 18, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(634),
                            DepartmentId = 6,
                            PostingDate = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(634),
                            RecruitmentDescription = "Looking for a Customer Support Representative",
                            RecruitmentPosition = "Customer Support Representative",
                            Requestment = "[]",
                            Status = "Open"
                        },
                        new
                        {
                            Id = 7,
                            Deadline = new DateTime(2024, 7, 20, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(636),
                            DepartmentId = 7,
                            PostingDate = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(636),
                            RecruitmentDescription = "Looking for a Legal Advisor",
                            RecruitmentPosition = "Legal Advisor",
                            Requestment = "[]",
                            Status = "Closed"
                        },
                        new
                        {
                            Id = 8,
                            Deadline = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(638),
                            DepartmentId = 8,
                            PostingDate = new DateTime(2024, 7, 3, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(638),
                            RecruitmentDescription = "Looking for an IT Specialist",
                            RecruitmentPosition = "IT Specialist",
                            Requestment = "[]",
                            Status = "Open"
                        },
                        new
                        {
                            Id = 9,
                            Deadline = new DateTime(2024, 8, 2, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(640),
                            DepartmentId = 9,
                            PostingDate = new DateTime(2024, 7, 13, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(639),
                            RecruitmentDescription = "Looking for an Operations Manager",
                            RecruitmentPosition = "Operations Manager",
                            Requestment = "[]",
                            Status = "Open"
                        },
                        new
                        {
                            Id = 10,
                            Deadline = new DateTime(2024, 8, 12, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(642),
                            DepartmentId = 10,
                            PostingDate = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(641),
                            RecruitmentDescription = "Looking for a Research Scientist",
                            RecruitmentPosition = "Research Scientist",
                            Requestment = "[]",
                            Status = "Open"
                        });
                });

            modelBuilder.Entity("HRM.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BasicSalary")
                        .HasColumnType("real");

                    b.Property<float>("Bonus")
                        .HasColumnType("real");

                    b.Property<float>("Deductions")
                        .HasColumnType("real");

                    b.Property<float>("NetSalary")
                        .HasColumnType("real");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicSalary = 50000f,
                            Bonus = 5000f,
                            Deductions = 2000f,
                            NetSalary = 53000f,
                            PaymentDate = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(670)
                        },
                        new
                        {
                            Id = 2,
                            BasicSalary = 55000f,
                            Bonus = 5500f,
                            Deductions = 2500f,
                            NetSalary = 58000f,
                            PaymentDate = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(672)
                        },
                        new
                        {
                            Id = 3,
                            BasicSalary = 60000f,
                            Bonus = 6000f,
                            Deductions = 3000f,
                            NetSalary = 63000f,
                            PaymentDate = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(674)
                        },
                        new
                        {
                            Id = 4,
                            BasicSalary = 65000f,
                            Bonus = 6500f,
                            Deductions = 3500f,
                            NetSalary = 68000f,
                            PaymentDate = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(675)
                        },
                        new
                        {
                            Id = 5,
                            BasicSalary = 70000f,
                            Bonus = 7000f,
                            Deductions = 4000f,
                            NetSalary = 73000f,
                            PaymentDate = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(676)
                        },
                        new
                        {
                            Id = 6,
                            BasicSalary = 75000f,
                            Bonus = 7500f,
                            Deductions = 4500f,
                            NetSalary = 78000f,
                            PaymentDate = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(677)
                        },
                        new
                        {
                            Id = 7,
                            BasicSalary = 80000f,
                            Bonus = 8000f,
                            Deductions = 5000f,
                            NetSalary = 83000f,
                            PaymentDate = new DateTime(2023, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(682)
                        },
                        new
                        {
                            Id = 8,
                            BasicSalary = 85000f,
                            Bonus = 8500f,
                            Deductions = 5500f,
                            NetSalary = 88000f,
                            PaymentDate = new DateTime(2023, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(684)
                        },
                        new
                        {
                            Id = 9,
                            BasicSalary = 90000f,
                            Bonus = 9000f,
                            Deductions = 6000f,
                            NetSalary = 93000f,
                            PaymentDate = new DateTime(2023, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(685)
                        },
                        new
                        {
                            Id = 10,
                            BasicSalary = 95000f,
                            Bonus = 9500f,
                            Deductions = 6500f,
                            NetSalary = 98000f,
                            PaymentDate = new DateTime(2023, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(686)
                        });
                });

            modelBuilder.Entity("HRM.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DayOfApplication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("TotalHours")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(711),
                            StartAt = new DateTime(2024, 7, 23, 3, 23, 50, 101, DateTimeKind.Local).AddTicks(708),
                            TotalHours = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(811),
                            StartAt = new DateTime(2024, 7, 23, 2, 23, 50, 101, DateTimeKind.Local).AddTicks(810),
                            TotalHours = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(817),
                            StartAt = new DateTime(2024, 7, 23, 4, 23, 50, 101, DateTimeKind.Local).AddTicks(816),
                            TotalHours = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(823),
                            StartAt = new DateTime(2024, 7, 23, 3, 23, 50, 101, DateTimeKind.Local).AddTicks(822),
                            TotalHours = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(829),
                            StartAt = new DateTime(2024, 7, 23, 5, 23, 50, 101, DateTimeKind.Local).AddTicks(828),
                            TotalHours = new TimeOnly(6, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(835),
                            StartAt = new DateTime(2024, 7, 23, 3, 23, 50, 101, DateTimeKind.Local).AddTicks(834),
                            TotalHours = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(841),
                            StartAt = new DateTime(2024, 7, 23, 1, 23, 50, 101, DateTimeKind.Local).AddTicks(840),
                            TotalHours = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(846),
                            StartAt = new DateTime(2024, 7, 23, 3, 23, 50, 101, DateTimeKind.Local).AddTicks(846),
                            TotalHours = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(852),
                            StartAt = new DateTime(2024, 7, 23, 2, 23, 50, 101, DateTimeKind.Local).AddTicks(852),
                            TotalHours = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            DayOfApplication = "[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]",
                            EndAt = new DateTime(2024, 7, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(858),
                            StartAt = new DateTime(2024, 7, 23, 4, 23, 50, 101, DateTimeKind.Local).AddTicks(858),
                            TotalHours = new TimeOnly(7, 0, 0)
                        });
                });

            modelBuilder.Entity("HRM.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTrain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndAt = new DateTime(2024, 6, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(888),
                            StartAt = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(887),
                            Status = "Completed",
                            TrainDescription = "Training for leadership skills",
                            TrainName = "Leadership Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 2,
                            EndAt = new DateTime(2024, 5, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(892),
                            StartAt = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(891),
                            Status = "Completed",
                            TrainDescription = "Training for technical skills",
                            TrainName = "Technical Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 3,
                            EndAt = new DateTime(2024, 4, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(895),
                            StartAt = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(894),
                            Status = "Completed",
                            TrainDescription = "Training for sales skills",
                            TrainName = "Sales Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 4,
                            EndAt = new DateTime(2024, 3, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(898),
                            StartAt = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(898),
                            Status = "Completed",
                            TrainDescription = "Training for marketing skills",
                            TrainName = "Marketing Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 5,
                            EndAt = new DateTime(2024, 2, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(901),
                            StartAt = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(901),
                            Status = "Completed",
                            TrainDescription = "Training for HR skills",
                            TrainName = "HR Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 6,
                            EndAt = new DateTime(2024, 1, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(904),
                            StartAt = new DateTime(2023, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(904),
                            Status = "Completed",
                            TrainDescription = "Training for finance skills",
                            TrainName = "Finance Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 7,
                            EndAt = new DateTime(2023, 12, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(913),
                            StartAt = new DateTime(2023, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(912),
                            Status = "Completed",
                            TrainDescription = "Training for customer service skills",
                            TrainName = "Customer Service Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 8,
                            EndAt = new DateTime(2023, 11, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(916),
                            StartAt = new DateTime(2023, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(915),
                            Status = "Completed",
                            TrainDescription = "Training for legal skills",
                            TrainName = "Legal Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 9,
                            EndAt = new DateTime(2023, 10, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(919),
                            StartAt = new DateTime(2023, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(918),
                            Status = "Completed",
                            TrainDescription = "Training for IT skills",
                            TrainName = "IT Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        },
                        new
                        {
                            Id = 10,
                            EndAt = new DateTime(2023, 9, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(922),
                            StartAt = new DateTime(2023, 8, 23, 11, 23, 50, 101, DateTimeKind.Local).AddTicks(921),
                            Status = "Completed",
                            TrainDescription = "Training for research skills",
                            TrainName = "Research Training",
                            TypeTrain = "[\"Online\",\"In-person\"]"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("HRM.Models.Benefits", b =>
                {
                    b.HasOne("HRM.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("HRM.Models.Employee", b =>
                {
                    b.HasOne("HRM.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("HRM.Models.Performance", b =>
                {
                    b.HasOne("HRM.Models.Employee", "Employee")
                        .WithMany("Performances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Models.Salary", "Salary")
                        .WithMany()
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Salary");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("HRM.Models.Recruitment", b =>
                {
                    b.HasOne("HRM.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRM.Models.Employee", b =>
                {
                    b.Navigation("Performances");
                });
#pragma warning restore 612, 618
        }
    }
}
